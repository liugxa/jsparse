<HTML xmlns="http://www.w3.org/1999/xhtml">
<HEAD>
<TITLE>Platform Cluster: Application Profile</TITLE>

<SCRIPT language=JavaScript src="../script/xmlextras.js" type=text/JavaScript></SCRIPT>
<SCRIPT language=JavaScript src="../script/validate.js" type=text/JavaScript></SCRIPT>

<SCRIPT language=JavaScript src="../script/x-variable.js" type=text/JavaScript></SCRIPT>
<SCRIPT language=JavaScript src="../script/x-common.js" type=text/JavaScript></SCRIPT>
<SCRIPT language=JavaScript src="../script/x-rule.js" type=text/JavaScript></SCRIPT>
<SCRIPT language=JavaScript src="../script/x-parse.js" type=text/JavaScript></SCRIPT>

<SCRIPT language=JavaScript src="../script/x-context.js" type=text/JavaScript></SCRIPT>
<SCRIPT language=JavaScript src="../script/x-domtree.js" type=text/JavaScript></SCRIPT>

<!-- UnitTest.js -->
<SCRIPT language=JavaScript src="../script/prototype.js" type=text/JavaScript></SCRIPT>
<script language=Javascript src="unittest.js"type=text/JavaScript></script>	
<link rel="stylesheet" href="test.css" type="text/css" />
</HEAD>


<BODY>
<div id="testlog"> </div>
<div id="activeRecord"> </div>


<script type="text/javascript" language="javascript" charset="utf-8">
//*******************************************************************************
//Test cases - test the file gui_service.xml & sc.xsd
//*******************************************************************************
//initilize parse
var XML_FILE	= "../xml/xml/gui_service_comment.xml";
var SCHEMA_FILE = "../xml/schema/sc1.xsd";
var SCHEMA_REF_FILE = "../xml/schema/ego.xsd";

var context = new DefaultDomTreeContext(true);
context.initilize(XML_FILE , SCHEMA_FILE , "sc" , "xsd");
context.addRefParse(SCHEMA_REF_FILE  , "ego" , "xsd");

//initilize domtree
var domTree = new DefaultDomTree(context);
new Test.Unit.Runner({
	
	testInit: function(){with(this){
		domTree.init("sc:ServiceDefinition");
		assertNotNull(domTree.reader);
		assertNotNull(domTree.reader.parse);
		assertNotNull(domTree.reader.dom);
		}
	},
	testGetRoot: function(){with(this){
		var root = domTree.getRoot();
		assertNotNull(root);
		assertEqual("sc:ServiceDefinition" , root.getName());
		}
	},
	testGetElement: function(){with(this){
		var element = domTree.getElement(1);
		assertNotNull(element);
		assertEqual("sc:Version" , element.name);
		assertEqual("string" , element.getContentRule().name);

		var e12 = domTree.getElement(11);
		assertNotNull(e12);
		assertEqual("sc:AllocationSpecification" , e12.name);

		var e3 = domTree.getElement(3);
		assertNotNull(e3);
		assertEqual("sc:MinInstances" , e3.name);
		assertEqual("restrictInteger" , e3.crule.name);
		assertEqual(1 , e3.crule.min);
		assertEqual(true , e3.crule.validate(2));
		}
	},
	testHasChildrens: function(){with(this){
		var b = domTree.hasChildrens(11);
		assertEqual(true , b);
		}
	},
	testGetChildrens: function(){with(this){
		var childrens = domTree.getChildrens(11);
		assertEqual(2 , childrens.length);
		assertEqual("ego:ConsumerID" , childrens[0].name);
		assertEqual("sc:ResourceSpecification" , childrens[1].name);
		
		assertEqual(1 , childrens[1].attributes.length)
		assertEqual("http://www.platform.com/ego/2005/05/schema/ce" , childrens[1].attributes[0].value);

		//test rule of the childrens

		}
	},
	testFindAllAttributes: function(){with(this){
		var as = domTree.getAllAvailAttributes("sc:ServiceInfo");
		assertEqual(1 , as.length);
		assertEqual("ServiceName" , as[0].name);

		var as1 = domTree.getAllAvailAttributes("sc:Dependency");
		assertEqual(1 , as1.length);
		assertEqual("type" , as1[0].name);
		}
	},
	testFindAllChildrens: function(){with(this){
		var cs = domTree.getAllAvailChildrens("sc:ControlPolicy");
		assertEqual(6 , cs.length);
		assertEqual("sc:StartType" , cs[0].name);
		assertEqual("sc:Dependency" , cs[5].name);
		}
	},
	testAddElement: function(){with(this){
		var fname = "testAddElement";
		
		//test add "Consumer" element ok!
		var newElement = domTree.addElement(0 , "sc:ActivityDescription");
		assertNotNull(newElement);
		}
	},
	/*
	testRemoveElement: function(){with(this){
		var fname = "testRemoveElement";

		//test remove osType
		try{
			domTree.removeElement(3);
			_alertSuccess(fname);
		}catch(e){
			_alertException(fname , e);
		}
	}
	*/
	testToHtml:function(){
		var xml = domTree.toHtml();
		var handle = document.getElementById("activeRecord");
		handle.innerHTML = xml;
	}
}, "testlog");





/*
function _Test(){
	
	this.testInit = function(){
		var fname = "testInit";

		domTree.init("sc:ServiceDefinition");
		if(domTree.reader == null 
			|| domTree.reader.parse == null
			|| domTree.reader.dom == null){
			_alertFailure(fname);
			return;
		}
		_alertSuccess(fname);
	}

	this.testGetRoot = function(){
		var fname = "testGetRoot";
		
		var root = domTree.getRoot();
		if(root == null || root.getName() != "sc:ServiceDefinition"){
			_alertFailure(fname, "root name is not Profile");
		}else{
			_alertSuccess(fname);
		}
	}

	testGetElement = function(){
		var fname = "testGetElement";
		
		var element = domTree.getElement(1);

		//test element
		if(element == null || element.getName() != "Consumer"){
			_alertFailure(fname , "element is null or name is error!");
			return;
		}
		//tese element's rule
		var rule = element.getRule();
		if(rule.name != "occurs" || rule.min != null){
			_alertFailure(fname , "the rule of the element is error!");
			return;
		}
		
		//test element's attributes
		var attributes = element.getAttributes();
		if(attributes.length != 15){
			_alertFailure(fname , "the attributes number of the element is error!");
			return;
		}

		if(	attributes[0].name != "applicationName" ||
			attributes[14].name != "flushDataAsap" ||
			attributes[1].value != "consumerId001"){
			_alertFailure(fname , "the name of the attribute is error!");
			return;
		}

		//test attribute's rule
		if(	attributes[0].rule.name != "normalizedString" ||
			attributes[14].rule.name != "boolean"){

			_alertFailure(fname , "the rule of the attribute is error!");
			return;
		}

		_alertSuccess(fname);
	}
	testHasChildrens = function(){
		var fname = "testHasChildrens";

		var b = domTree.hasChildrens(1);
		if(b){
			_alertFailure(fname, "the element [Consumer] has no children!");
			return;
		}

		_alertSuccess(fname);
	}

	testGetChildrens = function(){
		var fname = "testGetChildrens";
		
		var childrens = domTree.getChildrens(2);
		//alert("childrens.length=" + childrens.length);
		if(childrens.length != 2){
			_alertFailure(fname , "the numbers of childrens[Service] is error!");
			return;
		}

		if(childrens[0].getName() != "osTypes" || childrens[1].getName() != "Control"){
			_alertFailure(fname , "the name of childrens[Service] is error!");
			return;
		}

		//test rule of the childrens
		if(childrens[1].getRule().name != "occurs" || childrens[1].getRule().min != 0){
			_alertFailure(fname , "the rule of childrens[Service] is error!");
			return;
		}

		_alertSuccess(fname);
	}

	testAddElement = function(){
		var fname = "testAddElement";
		
		try{
			//test add "Consumer" element ok!
			domTree.addElement(0 , "Consumer");
			_alertSuccess(fname);
		}catch(e){
				_alertException(fname , e);
		}
	}

	testRemoveElement = function(){
		var fname = "testRemoveElement";

		//test remove osType
		try{
			domTree.removeElement(3);
			_alertSuccess(fname);
		}catch(e){
			_alertException(fname , e);
		}
	}

	testFindAllAttributes = function(){
		var fname = "testFindAllAttributes";

		var as = domTree.getAllAvailAttributes("Service");
		if(as.length == 3){
			_alertSuccess(fname);
		}else{
			_alertFailure(fname);
		}
	}
	
	testFindAllChildrens = function(){
		var fname = "testFindAllChildrens";

		var cs = domTree.getAllAvailChildrens("SOAM");
		if(cs.length == 8){
			_alertSuccess(fname);
		}else{
			_alertFailure(fname);
		}
	}

	
	this.testToXml = function(){
		var fname = "testToXml";
		var xml = domTree.toXml();
		var handle = document.getElementById("testlog");
		handle.innerHTML = xml;
	}
}

//*******************************************************************************
//Test:
//*******************************************************************************
autoTest();
function autoTest(){
	//var test = new _Test_Application();
	var test = new _Test();
	for (var property in test) {
		if(test[property] instanceof Function){
			try{
				test[property]();
			}catch(e){
				alertException(e);
			}
		}
	}
}
*/
</script>

</BODY>
</HTML>
